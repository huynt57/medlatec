<?php

/**
 * This is the model base class for the table "tbl_medicine_remind".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "MedicineRemind".
 *
 * Columns in table "tbl_medicine_remind" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $patient_id
 * @property integer $sick_id
 * @property string $name
 * @property integer $is_enabled
 * @property integer $notify_hour_type
 * @property string $notify_times_in_day
 * @property integer $hour_interval
 * @property string $notify_days_in_week
 * @property string $start_date
 * @property string $end_date
 * @property integer $day_interval
 * @property double $dosage
 * @property integer $dosage_unit
 * @property integer $meal
 * @property string $more_instruction
 * @property integer $last_updated
 * @property integer $doctor_id
 *
 */
abstract class BaseMedicineRemind extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_medicine_remind';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'MedicineRemind|MedicineReminds', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('id', 'required'),
			array('id, patient_id, sick_id, is_enabled, notify_hour_type, hour_interval, day_interval, dosage_unit, meal, last_updated, doctor_id', 'numerical', 'integerOnly'=>true),
			array('dosage', 'numerical'),
			array('name, notify_times_in_day, notify_days_in_week, start_date, end_date, more_instruction', 'safe'),
			array('patient_id, sick_id, name, is_enabled, notify_hour_type, notify_times_in_day, hour_interval, notify_days_in_week, start_date, end_date, day_interval, dosage, dosage_unit, meal, more_instruction, last_updated, doctor_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, patient_id, sick_id, name, is_enabled, notify_hour_type, notify_times_in_day, hour_interval, notify_days_in_week, start_date, end_date, day_interval, dosage, dosage_unit, meal, more_instruction, last_updated, doctor_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'patient_id' => Yii::t('app', 'Patient'),
			'sick_id' => Yii::t('app', 'Sick'),
			'name' => Yii::t('app', 'Name'),
			'is_enabled' => Yii::t('app', 'Is Enabled'),
			'notify_hour_type' => Yii::t('app', 'Notify Hour Type'),
			'notify_times_in_day' => Yii::t('app', 'Notify Times In Day'),
			'hour_interval' => Yii::t('app', 'Hour Interval'),
			'notify_days_in_week' => Yii::t('app', 'Notify Days In Week'),
			'start_date' => Yii::t('app', 'Start Date'),
			'end_date' => Yii::t('app', 'End Date'),
			'day_interval' => Yii::t('app', 'Day Interval'),
			'dosage' => Yii::t('app', 'Dosage'),
			'dosage_unit' => Yii::t('app', 'Dosage Unit'),
			'meal' => Yii::t('app', 'Meal'),
			'more_instruction' => Yii::t('app', 'More Instruction'),
			'last_updated' => Yii::t('app', 'Last Updated'),
			'doctor_id' => Yii::t('app', 'Doctor'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('patient_id', $this->patient_id);
		$criteria->compare('sick_id', $this->sick_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('is_enabled', $this->is_enabled);
		$criteria->compare('notify_hour_type', $this->notify_hour_type);
		$criteria->compare('notify_times_in_day', $this->notify_times_in_day, true);
		$criteria->compare('hour_interval', $this->hour_interval);
		$criteria->compare('notify_days_in_week', $this->notify_days_in_week, true);
		$criteria->compare('start_date', $this->start_date, true);
		$criteria->compare('end_date', $this->end_date, true);
		$criteria->compare('day_interval', $this->day_interval);
		$criteria->compare('dosage', $this->dosage);
		$criteria->compare('dosage_unit', $this->dosage_unit);
		$criteria->compare('meal', $this->meal);
		$criteria->compare('more_instruction', $this->more_instruction, true);
		$criteria->compare('last_updated', $this->last_updated);
		$criteria->compare('doctor_id', $this->doctor_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}