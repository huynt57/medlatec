<?php

/**
 * This is the model base class for the table "tbl_mail_queue".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "MailQueue".
 *
 * Columns in table "tbl_mail_queue" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $from_name
 * @property string $from_email
 * @property string $to_email
 * @property string $subject
 * @property string $message
 * @property integer $max_attempts
 * @property integer $attempts
 * @property integer $success
 * @property integer $date_published
 * @property integer $last_attempt
 * @property integer $date_sent
 *
 */
abstract class BaseMailQueue extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_mail_queue';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'MailQueue|MailQueues', $n);
	}

	public static function representingColumn() {
		return 'from_name';
	}

	public function rules() {
		return array(
			array('max_attempts, attempts, success, date_published, last_attempt, date_sent', 'numerical', 'integerOnly'=>true),
			array('from_name, from_email, to_email, subject', 'length', 'max'=>255),
			array('message', 'safe'),
			array('from_name, from_email, to_email, subject, message, max_attempts, attempts, success, date_published, last_attempt, date_sent', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, from_name, from_email, to_email, subject, message, max_attempts, attempts, success, date_published, last_attempt, date_sent', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'from_name' => Yii::t('app', 'From Name'),
			'from_email' => Yii::t('app', 'From Email'),
			'to_email' => Yii::t('app', 'To Email'),
			'subject' => Yii::t('app', 'Subject'),
			'message' => Yii::t('app', 'Message'),
			'max_attempts' => Yii::t('app', 'Max Attempts'),
			'attempts' => Yii::t('app', 'Attempts'),
			'success' => Yii::t('app', 'Success'),
			'date_published' => Yii::t('app', 'Date Published'),
			'last_attempt' => Yii::t('app', 'Last Attempt'),
			'date_sent' => Yii::t('app', 'Date Sent'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('from_name', $this->from_name, true);
		$criteria->compare('from_email', $this->from_email, true);
		$criteria->compare('to_email', $this->to_email, true);
		$criteria->compare('subject', $this->subject, true);
		$criteria->compare('message', $this->message, true);
		$criteria->compare('max_attempts', $this->max_attempts);
		$criteria->compare('attempts', $this->attempts);
		$criteria->compare('success', $this->success);
		$criteria->compare('date_published', $this->date_published);
		$criteria->compare('last_attempt', $this->last_attempt);
		$criteria->compare('date_sent', $this->date_sent);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}